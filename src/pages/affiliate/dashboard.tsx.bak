import React, { useEffect, useState } from 'react';
import { useQuery, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { api } from '@/lib/api';
import { apiProducts } from '@/lib/api';
import { useAuthStore } from '@/store/auth-store';
import { 
  BarChart3, 
  DollarSign, 
  Link2, 
  TrendingUp, 
  ArrowUpRight,
  ChevronRight,
  Copy,
  Percent,
  BarChart,
  LineChart,
  PieChart,
  Plus,
  MoreVertical
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { useLocation, Link as RouterLink } from 'react-router-dom';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Progress } from '@/components/ui/progress';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';

interface TrackingLink {
  id: string;
  productId: string;
  trackingCode: string;
  totalClicks: number;
  totalConversions: number;
  totalSales: number;
  product: any | null;
}

export default function AffiliateDashboard() {
  const { toast } = useToast();
  const [productMap, setProductMap] = useState<Record<string, any>>({});
  const tenant = useAuthStore((state) => state.tenant);
  const queryClient = useQueryClient();
  const location = useLocation();
  const { user } = useAuthStore();

  const { data: trackingLinks, isLoading, error } = useQuery<TrackingLink[]>({
    queryKey: ['affiliate-dashboard'],
    queryFn: async () => {
      const response = await api.get('/api/affiliates/dashboard');
      return response.data.trackingLinks.map((link: any) => ({
        id: link.id,
        productId: link.productId,
        trackingCode: link.trackingCode,
        totalClicks: link.totalClicks,
        totalConversions: link.totalConversions,
        totalSales: typeof link.totalSales === 'string' ? parseFloat(link.totalSales) : (link.totalSales ?? 0),
        product: link.product,
      }));
    },
  });

  const { data: productCommissions, isLoading: isLoadingComms } = useQuery<any[]>({
    queryKey: ['affiliate-product-commissions'],
    queryFn: async () => {
      const response = await api.get('/api/affiliates/product-commissions');
      return response.data;
    },
  });

  // Fetch missing product details
  useEffect(() => {
    if (!trackingLinks) return;
    const missingProductIds = trackingLinks
      .filter(link => !link.product && link.productId)
      .map(link => link.productId)
      .filter((id, idx, arr) => arr.indexOf(id) === idx && !productMap[id]);
    if (missingProductIds.length === 0) return;

    Promise.all(missingProductIds.map(id => apiProducts.getById(id)))
      .then(results => {
        const newMap: Record<string, any> = {};
        results.forEach((res, idx) => {
          newMap[missingProductIds[idx]] = res.data;
        });
        setProductMap(prev => ({ ...prev, ...newMap }));
      });
  }, [trackingLinks]);

  const handleCopyLink = (code: string) => {
    const link = `${window.location.origin}/track/${code}`;
    navigator.clipboard.writeText(link);
    toast({
      title: 'Tracking link copied!',
      description: 'The tracking link has been copied to your clipboard.',
    });
  };

  const handleLogout = () => {
    // Clear auth state
    useAuthStore.getState().logout();
    // Clear query cache
    queryClient.clear();
    // Redirect to login
    window.location.href = '/login';
  };

  // Calculate metrics
  const totalClicks = trackingLinks?.reduce((sum, link) => sum + link.totalClicks, 0) || 0;
  const totalConversions = trackingLinks?.reduce((sum, link) => sum + link.totalConversions, 0) || 0;
  const totalSales = trackingLinks?.reduce((sum, link) => sum + (typeof link.totalSales === 'number' && !isNaN(link.totalSales) ? link.totalSales : 0), 0) || 0;
  const conversionRate = totalClicks > 0 ? ((totalConversions / totalClicks) * 100).toFixed(2) : '0';
  const averageOrderValue = totalConversions > 0 ? (totalSales / totalConversions).toFixed(2) : '0';

  // Sort links by performance
  const sortedLinks = trackingLinks ? [...trackingLinks].sort((a, b) => b.totalSales - a.totalSales) : [];
  const topPerformingLinks = sortedLinks.slice(0, 3);

  // Calculate conversion rate for circular progress
  const conversionRateValue = parseFloat(conversionRate);
  
  // Monthly earnings goal (sample data)
  const monthlyGoal = {
    progress: 65,
    amount: 2500
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto"></div>
          <p className="mt-4 text-muted-foreground">Loading your dashboard...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle>Error</CardTitle>
            <CardDescription>
              {error instanceof Error ? error.message : 'Failed to load dashboard'}
            </CardDescription>
          </CardHeader>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      {/* Header Section */}
      <div className="flex justify-between items-center">
        <h1 className="text-4xl font-bold text-white bg-gradient-to-r from-teal-500 to-teal-400 px-8 py-4 rounded-r-full -ml-6 shadow-lg">
          Your Stats
        </h1>
        <Button variant="outline" className="rounded-full px-6 shadow-sm">
          More Details
        </Button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Left Column - Account Details */}
        <div className="lg:col-span-2">
          <Card className="shadow-md border-0 overflow-hidden">
            <CardHeader className="pb-2">
              <CardTitle className="text-xl">Account Details</CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {/* Conversion Rate Progress */}
              <div className="flex flex-col items-center justify-center">
                <div className="relative w-32 h-32">
                  <svg className="w-full h-full" viewBox="0 0 100 100">
                    <circle 
                      className="text-gray-200" 
                      strokeWidth="10" 
                      stroke="currentColor" 
                      fill="transparent" 
                      r="40" 
                      cx="50" 
                      cy="50" 
                    />
                    <circle 
                      className="text-teal-500" 
                      strokeWidth="10" 
                      strokeDasharray={`${Math.min(conversionRateValue * 2.51, 251)} 251`} 
                      strokeLinecap="round" 
                      stroke="currentColor" 
                      fill="transparent" 
                      r="40" 
                      cx="50" 
                      cy="50" 
                    />
                  </svg>
                  <div className="absolute inset-0 flex flex-col items-center justify-center">
                    <span className="text-3xl font-bold">{conversionRate}%</span>
                    <span className="text-xs text-gray-500">CONVERSION</span>
                  </div>
                </div>
              </div>

              {/* Earnings Card */}
              <div className="flex flex-col">
                <div className="bg-gradient-to-r from-teal-500 to-teal-400 rounded-lg p-4 text-white shadow-lg h-full flex flex-col justify-between">
                  <div className="uppercase text-sm font-bold mb-4">Earnings</div>
                  <div className="text-lg font-bold">${totalSales.toFixed(2)}</div>
                  <div className="mt-4 flex justify-end">
                    <div className="bg-white/20 p-2 rounded-full">
                      <DollarSign className="h-5 w-5 text-white" />
                    </div>
                  </div>
                </div>
              </div>

              {/* Stats Cards */}
              <div className="grid grid-cols-2 gap-4">
                {/* Clicks */}
                <div className="bg-white rounded-lg p-4 shadow-md border border-gray-100">
                  <div className="text-sm text-gray-500 mb-1">Clicks</div>
                  <div className="flex items-center justify-center">
                    <svg className="w-full h-16" viewBox="0 0 100 30">
                      <path d="M0,15 Q10,5 20,15 T40,15 T60,15 T80,15 T100,15" fill="none" stroke="#10B981" strokeWidth="2"/>
                    </svg>
                  </div>
                  <div className="text-center font-semibold mt-1">{totalClicks.toLocaleString()} clicks</div>
                </div>
                
                {/* Conversions */}
                <div className="bg-white rounded-lg p-4 shadow-md border border-gray-100">
                  <div className="text-sm text-gray-500 mb-1">Conversions</div>
                  <div className="flex items-center justify-center">
                    <svg className="w-full h-16" viewBox="0 0 100 30">
                      <path d="M0,20 Q25,5 50,20 T100,10" fill="none" stroke="#EC4899" strokeWidth="2"/>
                    </svg>
                  </div>
                  <div className="text-center font-semibold mt-1">{totalConversions.toLocaleString()} sales</div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Tracking Links */}
          <Card className="mt-6 shadow-md border-0">
            <CardHeader className="bg-gradient-to-r from-teal-500 to-teal-400 text-white">
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>Tracking Links</CardTitle>
                  <CardDescription className="text-white/80">Your product tracking links and their performance</CardDescription>
                </div>
                <Button variant="secondary" size="sm" asChild className="bg-white text-teal-600 hover:bg-gray-100">
                  <RouterLink to="/affiliate/links">
                    View All <ChevronRight className="ml-1 h-4 w-4" />
                  </RouterLink>
                </Button>
              </div>
            </CardHeader>
            <CardContent className="p-0">
              <Table>
                <TableHeader>
                  <TableRow className="border-b border-gray-200">
                    <TableHead className="text-teal-700">Product</TableHead>
                    <TableHead className="text-teal-700">Tracking Code</TableHead>
                    <TableHead className="text-right text-teal-700">Clicks</TableHead>
                    <TableHead className="text-right text-teal-700">Conversions</TableHead>
                    <TableHead className="text-right text-teal-700">Sales</TableHead>
                    <TableHead className="text-right text-teal-700">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {topPerformingLinks.map((link) => (
                    <TableRow key={link.id} className="hover:bg-gray-50">
                      <TableCell className="font-medium">
                        {link.product?.name || productMap[link.productId]?.name || 'Unknown Product'}
                      </TableCell>
                      <TableCell className="font-mono text-sm text-teal-600">
                        {link.trackingCode}
                      </TableCell>
                      <TableCell className="text-right">{link.totalClicks}</TableCell>
                      <TableCell className="text-right">{link.totalConversions}</TableCell>
                      <TableCell className="text-right">${link.totalSales.toFixed(2)}</TableCell>
                      <TableCell className="text-right">
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => handleCopyLink(link.trackingCode)}
                          className="border-teal-500 text-teal-600 hover:bg-teal-50"
                        >
                          <Copy className="h-4 w-4 mr-1" />
                          Copy
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                  {topPerformingLinks.length === 0 && (
                    <TableRow>
                      <TableCell colSpan={6} className="h-24 text-center text-gray-500">
                        No tracking links found
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </CardContent>
          </Card>

          {/* Feature Cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
            {/* Create Link Card */}
            <Card className="shadow-md border-0 bg-gradient-to-br from-yellow-50 to-yellow-100">
              <CardContent className="p-6 flex items-center justify-between">
                <div>
                  <h3 className="font-semibold text-lg mb-2">Create New Link</h3>
                  <div className="flex items-center">
                    <div className="bg-yellow-200 rounded-lg p-2">
                      <Link2 className="h-5 w-5 text-yellow-600" />
                    </div>
                  </div>
                </div>
                <div className="relative">
                  <div className="absolute -right-6 -bottom-6 w-24 h-24 bg-yellow-200 rounded-full opacity-50"></div>
                  <div className="relative z-10">
                    <Button variant="secondary" size="sm" asChild className="rounded-full bg-white text-yellow-600 hover:bg-yellow-50">
                      <RouterLink to="/affiliate/links">
                        <Plus className="h-4 w-4 mr-1" /> Create
                      </RouterLink>
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Performance Ranking */}
            <Card className="shadow-md border-0 bg-gradient-to-br from-teal-50 to-teal-100">
              <CardContent className="p-6 flex items-center justify-between">
                <div>
                  <h3 className="font-semibold text-lg mb-2">Performance Ranking</h3>
                  <div className="flex items-center">
                    <div className="bg-teal-200 rounded-lg p-2">
                      <BarChart3 className="h-5 w-5 text-teal-600" />
                    </div>
                  </div>
                </div>
                <div className="relative">
                  <div className="absolute -right-6 -bottom-6 w-24 h-24 bg-teal-200 rounded-full opacity-50"></div>
                  <div className="relative z-10 bg-white rounded-full w-12 h-12 flex items-center justify-center text-teal-500 font-bold text-xl">
                    #7
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Right Column - Profile & Commissions */}
        <div>
          <Card className="shadow-md border-0 h-full">
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <div className="flex items-center gap-2">
                <div className="text-sm text-gray-500">Hello,</div>
                <div className="font-semibold">{user?.firstName || 'Affiliate'} {user?.lastName || 'Partner'}</div>
              </div>
              <Button variant="ghost" size="icon" className="rounded-full">
                <MoreVertical className="h-5 w-5" />
              </Button>
            </CardHeader>
            <CardContent className="flex flex-col items-center pt-6">
              <Avatar className="h-24 w-24 border-4 border-white shadow-xl mb-6">
                <AvatarImage src={user?.avatarUrl || ""} alt={user?.firstName || "User"} />
                <AvatarFallback className="bg-teal-100 text-teal-800 text-2xl">
                  {user?.firstName?.[0] || "A"}
                </AvatarFallback>
              </Avatar>

              {/* Monthly Goal */}
              <div className="w-full mb-6">
                <div className="flex justify-between items-center mb-2">
                  <div className="font-medium">Monthly Goal</div>
                  <div className="text-gray-500">${monthlyGoal.amount}</div>
                </div>
                <div className="relative">
                  <div className="w-16 h-16 rounded-full border-4 border-gray-100 flex items-center justify-center absolute -left-2 -top-1 bg-white">
                    <div className="text-teal-500 font-bold text-lg">{monthlyGoal.progress}%</div>
                  </div>
                  <Progress value={monthlyGoal.progress} className="h-3 ml-6" />
                </div>
              </div>

              {/* Product Commissions */}
              <div className="w-full mt-8">
                <h3 className="font-medium mb-4">Product Commissions</h3>
                <div className="space-y-4">
                  {productCommissions && productCommissions.slice(0, 3).map((comm, index) => (
                    <div key={index} className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className={`bg-${['pink', 'blue', 'green'][index % 3]}-100 p-2 rounded-full`}>
                          <Percent className={`h-5 w-5 text-${['pink', 'blue', 'green'][index % 3]}-500`} />
                        </div>
                        <span className="text-sm truncate max-w-[120px]">{comm.productName || 'Product'}</span>
                      </div>
                      <div className="font-medium text-teal-600">{comm.finalCommission}%</div>
                    </div>
                  ))}
                  
                  {(!productCommissions || productCommissions.length === 0) && (
                    <div className="text-center text-gray-500 py-4">
                      No commission data available
                    </div>
                  )}
                </div>

                {productCommissions && productCommissions.length > 3 && (
                  <Button variant="ghost" size="sm" asChild className="w-full mt-4 text-teal-600">
                    <RouterLink to="/affiliate/commissions">
                      View all commissions
                    </RouterLink>
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}